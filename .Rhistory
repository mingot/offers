offersTrain$offer
offersTest = offers[offers$offer %in% offersTrain$offer, ]
offersTest
offersTest = offers[!(offers$offer %in% offersTrain$offer), ]
offersTest
nrow(offersTest)
sum(offersTest$company %in% offersTrain$company)
sum(offersTest$category %in% offersTrain$category)
offers.glm = glm(prior~offervalue)
offers.glm = glm(prior~offervalue, offersTrain)
offers.glm = lm(prior~offervalue, offersTrain)
summary(offers.glm)
offersTrain
nrow(TRANS[,,by=id])
nrow(TRANS[,,by=c(id,chain)])
nrow(TRANS[,sum(purchaseamount),by=c(id,chain)])
head(TRANS)
tables()
setkey(TRANS,id,chain)
nrow(TRANS[,sum(purchaseamount),by=c(id,chain)])
head(TRANS)
nrow(TRANS[,sum(purchaseamount),by=c("id","chain")])
nrow(TRANS[,sum(purchaseamount),by=c("id")])
head(offer)
head(offers)
head(TRANS)
S = TRANS[,times:=.N, by=list(category,brand,company)]
head(S)
S = TRANS[,list(times=.N), by=list(category,brand,company)]
head(S)
head(TRAIN)
S = TRANS[,list(product_times=.N), by=list(category,brand,company)]
head(S)
TRAIN2 = merge(TRAIN, S, by=c("brand","company","brand"), all.x=T)
head(TRAIN)
head(S)
nrow(S)
head(TRAIN)
nrow(S)
head(S,100)
help(data.table)
help(data.table)
help(merge)
S = TRANS[,list(product_times=.N), by=list(category,brand,company)]
TRAIN2 = merge(TRAIN, S, by=c("brand","company","brand"), all.x=T)
TRAIN2 = merge(TRAIN, S, by=c("brand","company","category"), all.x=T)
head(TRAIN2)
TRAIN = merge(TRAIN, S, by=c("brand","company","category"), all.x=T)
# data treatment
t = data.frame(TRAIN)
# check for brands
t[is.na(t)] = 0 # NA treatment
t$check_brand = 0
t[t$BRANDquant!=0,"check_brand"] = 1
t$check_category = 0
t[t$CATquant!=0,"check_category"] = 1
t$check_company = 0
t[t$COMPquant!=0,"check_company"] = 1
# Scaling
# t[,11:16] = scale(t[,11:16])
t$aov_sc = scale(t$aov)
t$freq_sc = scale(t$freq)
# priors to known offers
t = merge(t, offPrior, all.x=T)
# NA treatment
t[is.na(t)] = 0
head(t)
t$product_times_sc = scale(t$product_times)
k = 5 # Number of k-folds
id = sample(1:k,nrow(t),replace=TRUE)
list = 1:k
aucs=c()
for (i in 1:k){
trainingset = t[id %in% list[-i],]
testset = t[id %in% c(i),]
# Training
#   fit.glm = glm(factor(repeater) ~ BRANDquant + BRANDamount + CATquant + CATamount + COMPquant + COMPamount, data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ BRANDamount + CATquant + COMPquant + COMPamount, data=trainingset, family=binomial)
fit.glm = glm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc + product_times_sc,
data=trainingset, family=binomial)
# Testing
pred = predict(fit.glm, testset, type="response")
real = testset$repeater
rmse =  sqrt(sum((pred - real) ^ 2))/length(real)
aucs = c(aucs,auc(real, pred))
cat("auc:",auc(real, pred),"\n")
}
cat("mean auc:", mean(aucs),"sd:",sd(aucs),"\n")
summary(glm.fit)
summary(fit.glm)
ExtractFeatures = function(TRANS, TRAIN){
# convert from int64 to numeric some fields
set(TRANS, j="id", value=as.numeric(TRANS[["id"]]))
set(TRANS, j="company", value=as.numeric(TRANS[["company"]]))
# brand grouping
setkey(TRANS,id,brand)
setkey(TRAIN,id,brand)
S = TRANS[,list(BRANDquant=sum(purchasequantity), BRANDamount=sum(purchaseamount)), by=list(id,brand)]
TRAIN = merge(TRAIN, S, all.x=T)
# company grouping
setkey(TRANS,id,company)
setkey(TRAIN,id,company)
S = TRANS[,list(COMPquant=sum(purchasequantity), COMPamount=sum(purchaseamount)), by=list(id,company)]
TRAIN = merge(TRAIN, S, all.x=T)
# category grouping
setkey(TRANS,id,category)
setkey(TRAIN,id,category)
S = TRANS[,list(CATquant=sum(purchasequantity), CATamount=sum(purchaseamount)), by=list(id,category)]
TRAIN = merge(TRAIN, S, all.x=T)
# AOV
S = TRANS[,list(aov=sum(purchaseamount)), by=list(id, date)]
S = S[,list(aov=mean(aov)), by=id]
TRAIN = merge(TRAIN, S, by="id", all.x=T)
# frequency (times per month)
S = TRANS[,list(aov=length(purchaseamount)), by=list(id, date)] #group by dayly transactions
S = S[, month:=substr(S[["date"]],1,7)] # extract month-year
S = S[, times:=.N, by=list(id,month)] # group by month
S = S[, list(freq=mean(times)), by=id] # mean per user
TRAIN = merge(TRAIN, S, by="id", all.x=T)
# number of times the offered product was bought
S = TRANS[,list(product_times=.N), by=list(category,brand,company)]
TRAIN = merge(TRAIN, S, by=c("brand","company","category"), all.x=T)
# number of different users that boutht the product
# data treatment
t = data.frame(TRAIN)
# check for brands
t[is.na(t)] = 0 # NA treatment
t$check_brand = 0
t[t$BRANDquant!=0,"check_brand"] = 1
t$check_category = 0
t[t$CATquant!=0,"check_category"] = 1
t$check_company = 0
t[t$COMPquant!=0,"check_company"] = 1
# Scaling
# t[,11:16] = scale(t[,11:16])
t$aov_sc = scale(t$aov)
t$freq_sc = scale(t$freq)
t$product_times_sc = scale(t$product_times)
# priors to known offers
t = merge(t, offPrior, all.x=T)
# NA treatment
t[is.na(t)] = 0
return(t)
}
tTest = ExtractFeatures(TRANS_TEST, TEST)
head(tTest)
pred = predict(fit.glm, tTest, type="response")
summary(pred)
d = as.character(Sys.time())
d = gsub(":","_", d)
d = gsub("-","_", d)
d = gsub(" ","_", d)
write.table(data.frame(id=tTest$id, repeatProbability=pred), file=paste("data/submissions/sub",d,".csv",sep=""),row.names=F, quote=F, sep=",")
head(t)
summary(t$freq)
summary(fit.glm)
help(gbm)
library(gbm)
install.packages("gbm")
library(gbm)
help(gbm)
k = 5 # Number of k-folds
id = sample(1:k,nrow(t),replace=TRUE)
list = 1:k
aucs=c()
for (i in 1:k){
trainingset = t[id %in% list[-i],]
testset = t[id %in% c(i),]
# Training
#   fit.glm = glm(factor(repeater) ~ BRANDquant + BRANDamount + CATquant + CATamount + COMPquant + COMPamount, data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ BRANDamount + CATquant + COMPquant + COMPamount, data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc + product_times_sc,
#                 data=trainingset, family=binomial)
fit.gbm = gbm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc + product_times_sc,
distribution="adaboost", data=trainingset)
# Testing
pred = predict(fit.glm, testset, type="response")
real = testset$repeater
rmse =  sqrt(sum((pred - real) ^ 2))/length(real)
aucs = c(aucs,auc(real, pred))
cat("auc:",auc(real, pred),"\n")
}
cat("mean auc:", mean(aucs),"sd:",sd(aucs),"\n")
head(t)
t$repeater=0
t$repeater[t$repeattrips>0] = 1
k = 5 # Number of k-folds
id = sample(1:k,nrow(t),replace=TRUE)
list = 1:k
aucs=c()
for (i in 1:k){
trainingset = t[id %in% list[-i],]
testset = t[id %in% c(i),]
# Training
#   fit.glm = glm(factor(repeater) ~ BRANDquant + BRANDamount + CATquant + CATamount + COMPquant + COMPamount, data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ BRANDamount + CATquant + COMPquant + COMPamount, data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc + product_times_sc,
#                 data=trainingset, family=binomial)
fit.gbm = gbm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc + product_times_sc,
distribution="adaboost", data=trainingset)
# Testing
pred = predict(fit.glm, testset, type="response")
real = testset$repeater
rmse =  sqrt(sum((pred - real) ^ 2))/length(real)
aucs = c(aucs,auc(real, pred))
cat("auc:",auc(real, pred),"\n")
}
cat("mean auc:", mean(aucs),"sd:",sd(aucs),"\n")
summary(fit.gbm)
0&0&1
0*0*1
head(t)
t$check_combined = t$check_brand*t$check_category*t$check_company
head(t[,c("check_category","check_brand","check_company","check_combined")])
head(t[,c("check_category","check_brand","check_company","check_combined")],100)
k = 5 # Number of k-folds
id = sample(1:k,nrow(t),replace=TRUE)
list = 1:k
aucs=c()
for (i in 1:k){
trainingset = t[id %in% list[-i],]
testset = t[id %in% c(i),]
# Training
#   fit.glm = glm(factor(repeater) ~ BRANDquant + BRANDamount + CATquant + CATamount + COMPquant + COMPamount, data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ BRANDamount + CATquant + COMPquant + COMPamount, data=trainingset, family=binomial)
fit.glm = glm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc + product_times_sc + check_combined,
data=trainingset, family=binomial)
#   fit.gbm = gbm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc + product_times_sc,
#                 distribution="adaboost", data=trainingset)
# Testing
pred = predict(fit.glm, testset, type="response")
real = testset$repeater
rmse =  sqrt(sum((pred - real) ^ 2))/length(real)
aucs = c(aucs,auc(real, pred))
cat("auc:",auc(real, pred),"\n")
}
cat("mean auc:", mean(aucs),"sd:",sd(aucs),"\n")
k = 1 # Number of k-folds
id = sample(1:k,nrow(t),replace=TRUE)
list = 1:k
aucs=c()
for (i in 1:k){
trainingset = t[id %in% list[-i],]
testset = t[id %in% c(i),]
# Training
#   fit.glm = glm(factor(repeater) ~ BRANDquant + BRANDamount + CATquant + CATamount + COMPquant + COMPamount, data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ BRANDamount + CATquant + COMPquant + COMPamount, data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc + product_times_sc + check_combined,
#                 data=trainingset, family=binomial)
fit.gbm = gbm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc + product_times_sc + check_combined,
distribution="adaboost", data=trainingset)
# Testing
pred = predict(fit.glm, testset, type="response")
real = testset$repeater
rmse =  sqrt(sum((pred - real) ^ 2))/length(real)
aucs = c(aucs,auc(real, pred))
cat("auc:",auc(real, pred),"\n")
}
cat("mean auc:", mean(aucs),"sd:",sd(aucs),"\n")
k = 3 # Number of k-folds
id = sample(1:k,nrow(t),replace=TRUE)
list = 1:k
aucs=c()
for (i in 1:k){
trainingset = t[id %in% list[-i],]
testset = t[id %in% c(i),]
# Training
#   fit.glm = glm(factor(repeater) ~ BRANDquant + BRANDamount + CATquant + CATamount + COMPquant + COMPamount, data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ BRANDamount + CATquant + COMPquant + COMPamount, data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc + product_times_sc + check_combined,
#                 data=trainingset, family=binomial)
fit.gbm = gbm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc + product_times_sc + check_combined,
distribution="adaboost", data=trainingset)
# Testing
pred = predict(fit.glm, testset, type="response")
real = testset$repeater
rmse =  sqrt(sum((pred - real) ^ 2))/length(real)
aucs = c(aucs,auc(real, pred))
cat("auc:",auc(real, pred),"\n")
}
cat("mean auc:", mean(aucs),"sd:",sd(aucs),"\n")
summary(fit.gbm)
tTest$check_combined = tTest$check_brand*tTest$check_category*tTest$check_company
head(tTest)
pred = predict(fit.glm, tTest, type="response")
summary(fit.glm)
summary(pred)
d = as.character(Sys.time())
d = gsub(":","_", d)
d = gsub("-","_", d)
d = gsub(" ","_", d)
write.table(data.frame(id=tTest$id, repeatProbability=pred), file=paste("data/submissions/sub",d,".csv",sep=""),row.names=F, quote=F, sep=",")
head(t)
fit.glm = glm(repeater ~ . -offer -id -repeattrips,
data=trainingset, family=binomial)
summary(fit.glm)
fit.glm = glm(repeater ~ . -offer -id -repeattrips -aov -freq -product_times -offerdate,
data=trainingset, family=binomial)
summary(fit.glm)
k = 5 # Number of k-folds
id = sample(1:k,nrow(t),replace=TRUE)
list = 1:k
aucs=c()
for (i in 1:k){
trainingset = t[id %in% list[-i],]
testset = t[id %in% c(i),]
# Training
fit.glm = glm(repeater ~ . -offer -id -repeattrips -aov -freq -product_times -offerdate,
data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ BRANDamount + CATquant + COMPquant + COMPamount, data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc + product_times_sc + check_combined,
#                 data=trainingset, family=binomial)
#   fit.gbm = gbm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc + product_times_sc + check_combined,
#                 distribution="adaboost", data=trainingset)
# Testing
pred = predict(fit.glm, testset, type="response")
real = testset$repeater
rmse =  sqrt(sum((pred - real) ^ 2))/length(real)
aucs = c(aucs,auc(real, pred))
cat("auc:",auc(real, pred),"\n")
}
cat("mean auc:", mean(aucs),"sd:",sd(aucs),"\n")
pred = predict(fit.glm, tTest, type="response")
summary(fit.glm)
tTest$repeattrips=0
pred = predict(fit.glm, tTest, type="response")
tTest$offerdate=0
pred = predict(fit.glm, tTest, type="response")
tTest$offerdate=factor(0)
pred = predict(fit.glm, tTest, type="response")
summary(fit.glm)
trainingSet = trainingSet[,!names(trainingSet) %in% c("repeattrips","offerdate"))]
trainingSet = trainingSet[,!names(trainingSet) %in% c("repeattrips","offerdate")]
trainingset = trainingset[,!names(trainingset) %in% c("repeattrips","offerdate")]
fit.glm = glm(repeater ~ . -offer -id -repeattrips -aov -freq -product_times -offerdate,
data=trainingset, family=binomial)
fit.glm = glm(repeater ~ . -offer -id -aov -freq -product_times,
data=trainingset, family=binomial)
k = 5 # Number of k-folds
id = sample(1:k,nrow(t),replace=TRUE)
list = 1:k
aucs=c()
for (i in 1:k){
trainingset = t[id %in% list[-i],]
testset = t[id %in% c(i),]
# Training
trainingset = trainingset[,!names(trainingset) %in% c("repeattrips","offerdate")]
fit.glm = glm(repeater ~ . -offer -id -aov -freq -product_times,
data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ BRANDamount + CATquant + COMPquant + COMPamount, data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc + product_times_sc + check_combined,
#                 data=trainingset, family=binomial)
#   fit.gbm = gbm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc + product_times_sc + check_combined,
#                 distribution="adaboost", data=trainingset)
# Testing
pred = predict(fit.glm, testset, type="response")
real = testset$repeater
rmse =  sqrt(sum((pred - real) ^ 2))/length(real)
aucs = c(aucs,auc(real, pred))
cat("auc:",auc(real, pred),"\n")
}
cat("mean auc:", mean(aucs),"sd:",sd(aucs),"\n")
summary(fit.glm)
pred = predict(fit.glm, tTest, type="response")
summary(pred)
d = as.character(Sys.time())
d = gsub(":","_", d)
d = gsub("-","_", d)
d = gsub(" ","_", d)
write.table(data.frame(id=tTest$id, repeatProbability=pred), file=paste("data/submissions/sub",d,".csv",sep=""),row.names=F, quote=F, sep=",")
fit.gbm = gbm(repeater ~ . -offer -id -aov -freq -product_times,
data=trainingset, distribution="adaboost")
#
summary(fit.gbm)
str(t)
fit.glm = glm(repeater ~ . -offer -id -aov -freq -product_times,
data=trainingset, family=binomial)
summary(fit.glm)
unique(t$chain)
length(unique(t$chain))
length(unique(t$market))
fit.glm = glm(repeater ~ . -offer -id -aov -freq -product_times
+ factor(brands) + factor(companies) + factor(categories) + factor(market) - chains,
data=trainingset, family=binomial)
head(t)
fit.glm = glm(repeater ~ . -offer -id -aov -freq -product_times
+ factor(brand) + factor(company) + factor(category) + factor(market) - chain,
data=trainingset, family=binomial)
summary(glm)
summary(fit.glm)
fit.glm = glm(repeater ~ . -offer -id -aov -freq -product_times
+ factor(brand) + factor(company) + factor(category) + factor(market) - chain
- brand - company - category - market,
data=trainingset, family=binomial)
summary(fit.glm)
fit.glm = glm(repeater ~ . -offer -id -aov -freq -product_times
+ factor(market) - chain
- brand - company - category - market,
data=trainingset, family=binomial)
summary(fit.glm)
k = 5 # Number of k-folds
id = sample(1:k,nrow(t),replace=TRUE)
list = 1:k
aucs=c()
for (i in 1:k){
trainingset = t[id %in% list[-i],]
testset = t[id %in% c(i),]
# Training
trainingset = trainingset[,!names(trainingset) %in% c("repeattrips","offerdate")]
fit.glm = glm(repeater ~ . -offer -id -aov -freq -product_times
+ factor(market) - chain
- brand - company - category - market,
data=trainingset, family=binomial)
#   fit.gbm = gbm(repeater ~ . -offer -id -aov -freq -product_times,
#                 data=trainingset, distribution="adaboost")
#   fit.glm = glm(repeater ~ BRANDamount + CATquant + COMPquant + COMPamount, data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc + product_times_sc + check_combined,
#                 data=trainingset, family=binomial)
#   fit.gbm = gbm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc + product_times_sc + check_combined,
#                 distribution="adaboost", data=trainingset)
# Testing
pred = predict(fit.glm, testset, type="response")
real = testset$repeater
rmse =  sqrt(sum((pred - real) ^ 2))/length(real)
aucs = c(aucs,auc(real, pred))
cat("auc:",auc(real, pred),"\n")
}
cat("mean auc:", mean(aucs),"sd:",sd(aucs),"\n")
fit.glm = gbm(repeater ~ . -offer -id -aov -freq -product_times
+ factor(market) - chain
- brand - company - category - market,
data=trainingset, distribution="adaboost")
summary(fit.glm)
fit.glm = glm(repeater ~ . -offer -id -aov -freq -product_times
+ factor(market) - chain
- brand - company - category - market,
data=trainingset, family=binomial)
summary(glm)
summary(fit.glm)
pred = predict(fit.glm, tTest, type="response")
summary(pred)
d = as.character(Sys.time())
d = gsub(":","_", d)
d = gsub("-","_", d)
d = gsub(" ","_", d)
write.table(data.frame(id=tTest$id, repeatProbability=pred), file=paste("data/submissions/sub",d,".csv",sep=""),row.names=F, quote=F, sep=",")
summary(glm)
summary(fit.glm)
help(glm)
fit.glm$coefficients
fit.glm$coefficients[1:10]
fit.glm$coefficients[1:11]
fit.glm$coefficients[1:12]
fit.glm$coefficients[1:15]
fit.glm$coefficients[1:17]
fit.glm$coefficients[1:16]
names(fit.glm$coefficients[1:16])
write(names(fit.glm$coefficients[1:16]), file="")
write(names(fit.glm$coefficients[1:16]), file="") # list all the variables used
strcat(fit.glm$coefficients[1:16],",")
cat(fit.glm$coefficients[1:16],",")
cat(names(fit.glm$coefficients[1:16]),",")
cat(names(fit.glm$coefficients[1:16]),sep=",")
cat(names(fit.glm$coefficients[1:16]),sep=", ") # list all the variables used (1 line)
k = 5 # Number of k-folds
id = sample(1:k,nrow(t),replace=TRUE)
list = 1:k
aucs=c()
for (i in 1:k){
trainingset = t[id %in% list[-i],]
testset = t[id %in% c(i),]
# Training
trainingset = trainingset[,!names(trainingset) %in% c("repeattrips","offerdate")]
#   fit.glm = glm(repeater ~ . -offer -id -aov -freq -product_times
#                  + factor(market) - chain
#                 - brand - company - category - market,
#                 data=trainingset, family=binomial)
#   fit.gbm = gbm(repeater ~ . -offer -id -aov -freq -product_times,
#                 data=trainingset, distribution="adaboost")
#   fit.glm = glm(repeater ~ BRANDamount + CATquant + COMPquant + COMPamount, data=trainingset, family=binomial)
fit.glm = glm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc
+ product_times_sc + check_combined + factor(market),
data=trainingset, family=binomial)
#   fit.gbm = gbm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc + product_times_sc + check_combined,
#                 distribution="adaboost", data=trainingset)
# Testing
pred = predict(fit.glm, testset, type="response")
real = testset$repeater
rmse =  sqrt(sum((pred - real) ^ 2))/length(real)
aucs = c(aucs,auc(real, pred))
cat("auc:",auc(real, pred),"\n")
}
cat("mean auc:", mean(aucs),"sd:",sd(aucs),"\n")
cat(names(fit.glm$coefficients[1:16]),sep=", ") # list all the variables used (1 line)
cat(names(fit.glm$coefficients[1:10]),sep=", ") # list all the variables used (1 line)
cat(names(fit.glm$coefficients[1:9]),sep=", ") # list all the variables used (1 line)
cat(names(fit.glm$coefficients[2:9]),sep=", ") # list all the variables used (1 line)
fit.glm = glm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc
+ product_times_sc + check_combined + factor(market),
data=t, family=binomial)
summary(fit.glm)
pred = predict(fit.glm, tTest, type="response")
summary(pred)
d = as.character(Sys.time())
d = gsub(":","_", d)
d = gsub("-","_", d)
d = gsub(" ","_", d)
write.table(data.frame(id=tTest$id, repeatProbability=pred), file=paste("data/submissions/sub",d,".csv",sep=""),row.names=F, quote=F, sep=",")
summary(t)
summary(tTest)
summary(tTest[,9:ncol(tTest)])
summary(t[,9:ncol(t)])
