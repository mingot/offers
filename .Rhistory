t[is.na(t)] = 0
head(t)
t = data.frame(TRAIN)
t$repeater = 0
t$repeater[t$repeattrips>0] = 1
t[is.na(t)] = 0
t$check_brand = 0
t[t$BRANDquant!=0,check_brand] = 1
t$check_category = 0
t[t$CATquant!=0,check_category] = 1
t$check_company = 0
t[t$COMPquant!=0,check_company] = 1
t[,11:16] = scale(t[,11:16])
t = data.frame(TRAIN)
t$repeater = 0
t$repeater[t$repeattrips>0] = 1
t[is.na(t)] = 0
t$check_brand = 0
t[t$BRANDquant!=0,"check_brand"] = 1
t$check_category = 0
t[t$CATquant!=0,"check_category"] = 1
t$check_company = 0
t[t$COMPquant!=0,"check_company"] = 1
t[,11:16] = scale(t[,11:16])
head(t)
t = data.frame(TRAIN)
t$repeater = 0
t$repeater[t$repeattrips>0] = 1
t[is.na(t)] = 0
t$check_brand = 0
t[t$BRANDquant!=0,"check_brand"] = 1
t$check_category = 0
t[t$CATquant!=0,"check_category"] = 1
t$check_company = 0
t[t$COMPquant!=0,"check_company"] = 1
head(t)
k = 5 # Number of k-folds
id = sample(1:k,nrow(t),replace=TRUE)
list = 1:k
aucs=c()
for (i in 1:k){
trainingset = t[id %in% list[-i],]
testset = t[id %in% c(i),]
# Training
#   fit.glm = glm(factor(repeater) ~ BRANDquant + BRANDamount + CATquant + CATamount + COMPquant + COMPamount, data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ BRANDamount + CATquant + COMPquant + COMPamount, data=trainingset, family=binomial)
fit.glm = glm(repeater ~ check_company + check_category + check_brand, data=trainingset, family=binomial)
# Testing
pred = predict(fit.glm, testset, type="response")
real = testset$repeater
rmse =  sqrt(sum((pred - real) ^ 2))/length(real)
aucs = c(aucs,auc(real, pred))
cat("auc:",auc(real, pred),"\n")
}
cat("mean auc:", mean(aucs),"sd:",sd(aucs),"\n")
summary(fit.glm)
nrow(t)
t = data.frame(TEST)
t[is.na(t)] = 0
t$check_brand = 0
t[t$BRANDquant!=0,"check_brand"] = 1
t$check_category = 0
t[t$CATquant!=0,"check_category"] = 1
t$check_company = 0
t[t$COMPquant!=0,"check_company"] = 1
nrow(t)
pred = predict(fit.glm, t, type="response")
summary(pred)
d = as.character(Sys.time())
d = gsub(":","_", d)
d = gsub("-","_", d)
d = gsub(" ","_", d)
write.table(data.frame(id=t$id, repeatProbability=pred), file=paste("data/submissions/sub",d,".csv",sep=""),row.names=F, quote=F, sep=",")
length(unique(train$brand))
length(unique(t$brand))
nrow(offers)
head(TRANS)
a = TRANS[,by=list(brand, company, category)]
head()
)
sfasdf
asdf
head(TRANS)
head(a)
a = TRANS[sum(purchasequantity),by=list(brand, company, category)]
a = TRANS[,sum(purchasequantity),by=list(brand, company, category)]
head(a)
nrow(a)
nrow(TRANS)
length(unique(t$brand))
length(unique(t$company))
length(unique(t$category))
t2 = data.frame(TEST)
summary(fit.glm)
help(aggregate)
aggregate(t$repeater, by=c("offer"), data=t,FUN=sum)
head(t)
t = data.frame(TRAIN)
t$repeater = 0
t$repeater[t$repeattrips>0] = 1
s = aggregate(t$repeater, by=c("offer"), data=t,FUN=sum)
s = aggregate(t$repeater, by=list("offer"), data=t,FUN=sum)
s = aggregate(t$repeater, by=list(offer), data=t,FUN=sum)
s = aggregate(t$repeater, by=list(t$offer), data=t,FUN=sum)
head(t)
s = aggregate(t$repeater, by=list(t$offer), FUN=sum)
head(s)
s
length(unique(test$offer))
sum(test$offer %in% train$offer)
sum(unique(test$offer) %in% unique(train$offer))
offerIds = test[!(unique(test$offer) %in% unique(train$offer)),"offer"]
offerIds
unique(offerIds)
offerIds = unique(test$offer)[!(unique(test$offer) %in% unique(train$offer)]
offerIds = unique(test$offer)[!(unique(test$offer) %in% unique(train$offer))]
offerIds
nrow(test[test$offer %in% offerIds,])
nrow(test)
table(test$offer)
table(test[test$offer %in% offerIds,"offer"])
table(test[!(test$offer %in% offerIds),"offer"])
nrow(test)
145/151
S = TRANS[,list(aov=sum(purchaseamount)), by=list(id,date)]
head(S)
S = TRANS[,list(aov=mean(purchaseamount)), by=list(id)]
head(S)
S = TRANS[,list(aov=sum(purchaseamount)), by=list(id, date)]
S = S[,list(aov=mean(aov)), by=id]
head(s)
S = TRANS[,list(aov=sum(purchaseamount)), by=list(id, date)]
head(S)
S = S[,list(aov=mean(aov)), by=id]
head(S)
head(TRAIN)
TRAIN = merge(TRAIN, S, all.x=T)
tables()
head(S)
TRAIN = merge(TRAIN, S, all.x=T)
head(TRAIN)
TRAIN = merge(TRAIN, S,by=id, all.x=T)
TRAIN = merge(TRAIN, S,by=c(id), all.x=T)
help(merge)
TRAIN = merge(TRAIN, S,by=c("id"), all.x=T)
head(TRAIN)
# data treatment
t = data.frame(TRAIN)
t$repeater = 0
t$repeater[t$repeattrips>0] = 1
# NA treatment
t[is.na(t)] = 0
# check for brands
t$check_brand = 0
t[t$BRANDquant!=0,"check_brand"] = 1
t$check_category = 0
t[t$CATquant!=0,"check_category"] = 1
t$check_company = 0
t[t$COMPquant!=0,"check_company"] = 1
head(t)
k = 5 # Number of k-folds
id = sample(1:k,nrow(t),replace=TRUE)
list = 1:k
aucs=c()
for (i in 1:k){
trainingset = t[id %in% list[-i],]
testset = t[id %in% c(i),]
# Training
#   fit.glm = glm(factor(repeater) ~ BRANDquant + BRANDamount + CATquant + CATamount + COMPquant + COMPamount, data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ BRANDamount + CATquant + COMPquant + COMPamount, data=trainingset, family=binomial)
fit.glm = glm(repeater ~ check_company + check_category + check_brand + aov, data=trainingset, family=binomial)
# Testing
pred = predict(fit.glm, testset, type="response")
real = testset$repeater
rmse =  sqrt(sum((pred - real) ^ 2))/length(real)
aucs = c(aucs,auc(real, pred))
cat("auc:",auc(real, pred),"\n")
}
cat("mean auc:", mean(aucs),"sd:",sd(aucs),"\n")
summary(t$aov)
t[t$aov>1000,"id"]
TRANS[id="218346319",]
TRANS["218346319",]
TRANS[218346319,]
TRANS[id=218346319,]
head(TRANS)
TRANS[id=86246,]
TRANS["86246",]
TRANS[id="86246",]
tables()
TRANS[J(id=86246),]
TRANS[J(id=218346319),]
head(t)
t[t$id==218346319,]
S = TRANS[,list(aov=sum(purchaseamount)), by=list(id, date)]
S[J(id="218346319"),]
head(S)
S[J(id=218346319),]
setkey(S,id)
S[J(id=218346319),]
TRANS[J(id=218346319),]
str(TRANS)
str(S)
head(TRANS)
head(TRANS,10)
TRANS[J(id=86246),]
TRANS[J(id=218346319),]
print(TRANS[J(id=218346319),], nrow=100)
print(TRANS[J(id=218346319),], nrow=10)
head(TRANS[J(id=218346319),])
head(TRANS[J(id=218346319),],100)
S = TRANS[,list(aov=length(purchaseamount)), by=list(id, date)]
head(S)
head(S)
as.Date("2012-03-06")
dd = as.Date("2012-03-06")
dd
class(dd)
month(dd)
day(dd)
year(dd)
help(year)
wday(dd)
mday(dd)
head(S[,list(date)])
k = head(S[,list(date)])
k
k = as.vector(head(S[,list(date)]))
k
class(k)
k = as.data.frame(head(S[,list(date)]))
k
head(k)
S[[2]]
S[["date"]]
S = S[,month:=month(as.Date(S[["date"]]))]
head(S)
tail(S)
nrow(S)
S = TRANS[,list(aov=length(purchaseamount)), by=list(id, date)]
nrow(TRANS)
nrow(S)
r = "23-32-12"
strsplit(r,"-")
strsplit(r,"-")[[1]]
strsplit(r,"-")[[1]][1]
help(strsplit)
summary(fit.glm)
t$aov_sc = sacle(t$aov)
t$aov_sc = scale(t$aov)
haed(t)
head(T)
head(t)
k = 5 # Number of k-folds
id = sample(1:k,nrow(t),replace=TRUE)
list = 1:k
aucs=c()
for (i in 1:k){
trainingset = t[id %in% list[-i],]
testset = t[id %in% c(i),]
# Training
#   fit.glm = glm(factor(repeater) ~ BRANDquant + BRANDamount + CATquant + CATamount + COMPquant + COMPamount, data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ BRANDamount + CATquant + COMPquant + COMPamount, data=trainingset, family=binomial)
fit.glm = glm(repeater ~ check_company + check_category + check_brand + aov, data=trainingset, family=binomial)
# Testing
pred = predict(fit.glm, testset, type="response")
real = testset$repeater
rmse =  sqrt(sum((pred - real) ^ 2))/length(real)
aucs = c(aucs,auc(real, pred))
cat("auc:",auc(real, pred),"\n")
}
cat("mean auc:", mean(aucs),"sd:",sd(aucs),"\n")
S = TRANS[,list(aov=length(purchaseamount)), by=list(id, date)]
S = S[,month:=month(as.Date(S[["date"]]))]
head(S)
head(S,100)
S = S[,year:=year(as.Date(S[["date"]]))]
head(S)
S = [,list(times=length(id)),by=list(id,month,year)]
S = S[,list(times=length(id)),by=list(id,month,year)]
head(S)
k = 5 # Number of k-folds
id = sample(1:k,nrow(t),replace=TRUE)
list = 1:k
aucs=c()
for (i in 1:k){
trainingset = t[id %in% list[-i],]
testset = t[id %in% c(i),]
# Training
#   fit.glm = glm(factor(repeater) ~ BRANDquant + BRANDamount + CATquant + CATamount + COMPquant + COMPamount, data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ BRANDamount + CATquant + COMPquant + COMPamount, data=trainingset, family=binomial)
fit.glm = glm(repeater ~ check_company + check_category + check_brand + aov_sc, data=trainingset, family=binomial)
# Testing
pred = predict(fit.glm, testset, type="response")
real = testset$repeater
rmse =  sqrt(sum((pred - real) ^ 2))/length(real)
aucs = c(aucs,auc(real, pred))
cat("auc:",auc(real, pred),"\n")
}
cat("mean auc:", mean(aucs),"sd:",sd(aucs),"\n")
summary(fit.glm)
TEST = data.table(merge(test, offers[,c("offer","company","brand","category")], all.x=T))
TRANS = fread("data/sample1/transactions_test.txt")
setnames(TRANS, c("id","chain","dept","category","company","brand","date","productsize","productmeasure","purchasequantity","purchaseamount"))
# convert to numeric some fields
set(TRANS, j="id", value=as.numeric(TRANS[["id"]]))
set(TRANS, j="company", value=as.numeric(TRANS[["company"]]))
# brand grouping
setkey(TRANS,id,brand)
setkey(TEST,id,brand)
S = TRANS[,list(BRANDquant=sum(purchasequantity), BRANDamount=sum(purchaseamount)), by=list(id,brand)]
TEST = merge(TEST, S, all.x=T)
# company grouping
setkey(TRANS,id,company)
setkey(TEST,id,company)
S = TRANS[,list(COMPquant=sum(purchasequantity), COMPamount=sum(purchaseamount)), by=list(id,company)]
TEST = merge(TEST, S, all.x=T)
# category grouping
setkey(TRANS,id,category)
setkey(TEST,id,category)
S = TRANS[,list(CATquant=sum(purchasequantity), CATamount=sum(purchaseamount)), by=list(id,category)]
TEST = merge(TEST, S, all.x=T)
# average ticket
S = TRANS[,list(aov=sum(purchaseamount)), by=list(id, date)]
S = S[,list(aov=mean(aov)), by=id]
TEST = merge(TEST, S,by=c("id"), all.x=T)
t = data.frame(TEST)
t[is.na(t)] = 0
t$check_brand = 0
t[t$BRANDquant!=0,"check_brand"] = 1
t$check_category = 0
t[t$CATquant!=0,"check_category"] = 1
t$check_company = 0
t[t$COMPquant!=0,"check_company"] = 1
t$aov_sc = scale(t$aov)
head(t)
pred = predict(fit.glm, t, type="response")
summary(pred)
d = as.character(Sys.time())
d = gsub(":","_", d)
d = gsub("-","_", d)
d = gsub(" ","_", d)
write.table(data.frame(id=t$id, repeatProbability=pred), file=paste("data/submissions/sub",d,".csv",sep=""),row.names=F, quote=F, sep=",")
head(t)
substr("2013-06-27",1,4)
substr("2013-06-27",1,7)
S = TRANS[,list(aov=length(purchaseamount)), by=list(id, date)]
head(S)
S = S[,month:=substr(S[["date"]]),1,7)]
S = S[,month:=substr(S[["date"]],1,7)]
head(S)
S = S[,list(times=length(id)),by=list(id,month)]
head(S)
S = S[,list(times=.N),by=list(id,month)]
S = TRANS[,list(aov=length(purchaseamount)), by=list(id, date)]
S = S[,month:=substr(S[["date"]],1,7)]
S = S[,list(times=.N),by=list(id,month)]
head(S)
head(S,100)
S = TRANS[,list(aov=length(purchaseamount)), by=list(id, date)]
K = S[, month:=substr(S[["date"]],1,7)]
K = K[, times=.N, by=list(id,month)]
K = K[, times:=.N, by=list(id,month)]
head(K)
S = TRANS[,list(aov=length(purchaseamount)), by=list(id, date)]
S = S[, month:=substr(S[["date"]],1,7)]
S = S[, times:=.N, by=list(id,month)]
head(S)
S = S[, freq:=mean(times), by=id] # mean per user
head(S)
S = TRANS[,list(aov=length(purchaseamount)), by=list(id, date)]
S = S[, month:=substr(S[["date"]],1,7)] # extract month-year
S = S[, times:=.N, by=list(id,month)] # group by month
S = S[, list(freq=mean(times)), by=id] # mean per user
head(S)
TRAIN = merge(TRAIN, S, by="id", all.x=T)
head(TRAIN)
S = TRANS[,list(aov=length(purchaseamount)), by=list(id, date)] #group by dayly transactions
S = S[, month:=substr(S[["date"]],1,7)] # extract month-year
S = S[, times:=.N, by=list(id,month)] # group by month
S = S[, list(freq=mean(times)), by=id] # mean per user
head(S)
head(TRAIN)
TRAIN = data.table(merge(train, offers[,c("offer","company","brand","category")], all.x=T))
TRANS = fread("data/sample/transactions_train.csv", header=T)
setnames(TRANS, c("id","chain","dept","category","company","brand","date","productsize","productmeasure","purchasequantity","purchaseamount"))
# convert from int64 to numeric some fields
set(TRANS, j="id", value=as.numeric(TRANS[["id"]]))
set(TRANS, j="company", value=as.numeric(TRANS[["company"]]))
# brand grouping
setkey(TRANS,id,brand)
setkey(TRAIN,id,brand)
S = TRANS[,list(BRANDquant=sum(purchasequantity), BRANDamount=sum(purchaseamount)), by=list(id,brand)]
TRAIN = merge(TRAIN, S, all.x=T)
# company grouping
setkey(TRANS,id,company)
setkey(TRAIN,id,company)
S = TRANS[,list(COMPquant=sum(purchasequantity), COMPamount=sum(purchaseamount)), by=list(id,company)]
TRAIN = merge(TRAIN, S, all.x=T)
# category grouping
setkey(TRANS,id,category)
setkey(TRAIN,id,category)
S = TRANS[,list(CATquant=sum(purchasequantity), CATamount=sum(purchaseamount)), by=list(id,category)]
TRAIN = merge(TRAIN, S, all.x=T)
S = TRANS[,list(aov=sum(purchaseamount)), by=list(id, date)]
S = S[,list(aov=mean(aov)), by=id]
TRAIN = merge(TRAIN, S, by="id", all.x=T)
S = TRANS[,list(aov=length(purchaseamount)), by=list(id, date)] #group by dayly transactions
S = S[, month:=substr(S[["date"]],1,7)] # extract month-year
S = S[, times:=.N, by=list(id,month)] # group by month
S = S[, list(freq=mean(times)), by=id] # mean per user
head(S)
head(TRAIN)
TRAIN2 = merge(TRAIN, S, by="id", all.x=T)
head(TRAIN2)
TRAIN = merge(TRAIN, S, by="id", all.x=T)
head(TRAIN)
t = data.frame(TRAIN)
t$repeater = 0
t$repeater[t$repeattrips>0] = 1
t[is.na(t)] = 0
t$check_brand = 0
t[t$BRANDquant!=0,"check_brand"] = 1
t$check_category = 0
t[t$CATquant!=0,"check_category"] = 1
t$check_company = 0
t[t$COMPquant!=0,"check_company"] = 1
t$aov_sc = scale(t$aov)
t$freq_sc = scale(t$freq)
head(T)
head(t)
k = 5 # Number of k-folds
id = sample(1:k,nrow(t),replace=TRUE)
list = 1:k
aucs=c()
for (i in 1:k){
trainingset = t[id %in% list[-i],]
testset = t[id %in% c(i),]
# Training
#   fit.glm = glm(factor(repeater) ~ BRANDquant + BRANDamount + CATquant + CATamount + COMPquant + COMPamount, data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ BRANDamount + CATquant + COMPquant + COMPamount, data=trainingset, family=binomial)
fit.glm = glm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc, data=trainingset, family=binomial)
# Testing
pred = predict(fit.glm, testset, type="response")
real = testset$repeater
rmse =  sqrt(sum((pred - real) ^ 2))/length(real)
aucs = c(aucs,auc(real, pred))
cat("auc:",auc(real, pred),"\n")
}
cat("mean auc:", mean(aucs),"sd:",sd(aucs),"\n")
offPrior = aggregate(sum(t$repeater), by=t$offer)
offPrior = aggregate(t$repeater, by=t$offer, FUN=sum)
offPrior = aggregate(t$repeater, by=list(t$offer), FUN=mean)
offPrior
names(offPrior) = c("offer","offer_prior")
offPrior
head(t)
t = merge(t, offPrior, all.x=T)
head(t)
sum(is.na(t$offer_prior))
sum(is.na(t$offer_prior))
offerTest = unique(test$offer)
offerTest
t = data.frame(TRAIN)
t$repeater = 0
t$repeater[t$repeattrips>0] = 1
# NA treatment
t[is.na(t)] = 0
# check for brands
t$check_brand = 0
t[t$BRANDquant!=0,"check_brand"] = 1
t$check_category = 0
t[t$CATquant!=0,"check_category"] = 1
t$check_company = 0
t[t$COMPquant!=0,"check_company"] = 1
# Scaling
# t[,11:16] = scale(t[,11:16])
t$aov_sc = scale(t$aov)
t$freq_sc = scale(t$freq)
offPrior = aggregate(t$repeater, by=list(t$offer), FUN=mean)
names(offPrior) = c("offer","offer_prior")
t = merge(t, offPrior[offPrior$offer %in% unique(test$offer)], all.x=T)
t2 = merge(t, offPrior[offPrior$offer %in% unique(test$offer),], all.x=T)
head(t2)
sum(is.na(t2$offer_prior))
sum(is.na(t2$offer_prior))/nrow(t2)
sum(is.na(t2$offer_prior))*100/nrow(t2)
t[is.na(t)] = 0
head(t)
t = merge(t, offPrior[offPrior$offer %in% unique(test$offer),], all.x=T)
t[is.na(t)] = 0
head(t)
k = 5 # Number of k-folds
id = sample(1:k,nrow(t),replace=TRUE)
list = 1:k
aucs=c()
for (i in 1:k){
trainingset = t[id %in% list[-i],]
testset = t[id %in% c(i),]
# Training
#   fit.glm = glm(factor(repeater) ~ BRANDquant + BRANDamount + CATquant + CATamount + COMPquant + COMPamount, data=trainingset, family=binomial)
#   fit.glm = glm(repeater ~ BRANDamount + CATquant + COMPquant + COMPamount, data=trainingset, family=binomial)
fit.glm = glm(repeater ~ check_company + check_category + check_brand + aov_sc + freq_sc + offer_prior,
data=trainingset, family=binomial)
# Testing
pred = predict(fit.glm, testset, type="response")
real = testset$repeater
rmse =  sqrt(sum((pred - real) ^ 2))/length(real)
aucs = c(aucs,auc(real, pred))
cat("auc:",auc(real, pred),"\n")
}
cat("mean auc:", mean(aucs),"sd:",sd(aucs),"\n")
